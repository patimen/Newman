#!/usr/bin/env node

/**
 * @Authors Arjun Variar & Prakhar Srivastav.
 * @Purpose Integerates POSTMAN Collection runner/tests with CI systems.
 * 
 * Main file which parses the command line arguments and runs Newman, Supports JSON5.
 */

var color   = require('cli-color'),
	program = require('commander'),
	path    = require('path'),
	request = require('unirest'),
	fs      = require('fs'),
	Helpers = require('../src/utilities/Helpers'),
	Errors  = require('../src/utilities/ErrorHandler'),
	JSON5   = require('json5'),
	Newman  = require('../src/Newman');

function parseArguments() {
	program
	  .version('1.0.6')
	  .usage('[options] file')
	  .option('-c, --collection [file]', 'Specify a Postman collection as a JSON [file]', null)
	  .option('-u, --url [url]', 'Specify a Postman collection as a [url]', null)
	  .option('-e, --environment [file]', 'Specify a Postman environment as a JSON [file]', null)
	  .option('-d, --data [file]', 'Specify a data file to use either json or csv', null)
	  .option('-s, --stopOnError', "Stops the runner when a test case fails", null)
	  .option('-n, --number [number]', 'Define the number of iterations to run.', null)
	  .option('-C, --noColor', 'Disable colored output.', null)
      .option('-j, --collectionFile [file]', 'This file will contain a copy of the colleciton, with the responses from the tests added. [file]', null)
	  .option('-o, --outputFile [file]', 'Path to file where output should be written. [file]', null);

	program.on('--help', function() {
	  console.log('  Newman is a command-line collection runner for Postman.');
	  console.log('');
	  console.log('  Examples:');
	  console.log('');
	  console.log('    newman -c POSTMAN_COLLECTION');
	  console.log('    newman -u POSTMAN_COLLECTION -e POSTMAN_ENVIRONMENT');
	  console.log('');
	  console.log('  For more documentation, issues and examples head over to https://github.com/a85/Newman');
	  console.log('');
	});

	program.parse(process.argv);

	if (program.collection) {
		Helpers.validateCollectionFile(program.collection);
	} else if (program.url) {
		Helpers.validateCollectionUrl(program.url);
	} else {
		Errors.terminateWithError("Please provide a valid collection file / url to run");
	}
	
	if (program.data) {
		Helpers.validateDataFile(program.data);
	}
}

function main() {
	parseArguments();
	
	newmanOptions = {};

	if (program.environment) {
		// in case of environment variable set the envJson property 
 		// on the options object
		newmanOptions.envJson = JSON5.parse(fs.readFileSync(program.environment, 'utf8'));
	}

	newmanOptions.responseHandler = 'TestResponseHandler';

	if (program.number) {
		newmanOptions.iterationCount = program.number;
	}

	if (program.outputFile) {
		newmanOptions.outputFile = program.outputFile;
	}

    if (program.collectionFile) {
        newmanOptions.collectionFile = program.collectionFile;
    }

	if (program.data) {
		newmanOptions.dataFile = program.data;
	}

	newmanOptions.stopOnError = !!program.stopOnError;
	newmanOptions.noColor = !!program.noColor;

	if (program.collection) {
		// read collection from the filesystem
		var collectionJson = JSON5.parse(fs.readFileSync(program.collection, 'utf8'));
		Newman.execute(collectionJson, newmanOptions);

	} else {
		// get collection from url
		request.get(program.url).type('json').end(function(data) {
			if (data.error) {
				Errors.terminateWithError('Unable to fetch a valid response. Error: ' + data.code);
			}
			Newman.execute(data.body, newmanOptions);
		});
	}
}

main();
