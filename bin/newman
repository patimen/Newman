#!/usr/bin/env node

/**
 * @Authors Arjun Variar & Prakhar Srivastav.
 * @Purpose Integerates POSTMAN Collection runner/tests with CI systems.
 * 
 * Main file which parses the command line arguments and runs Newman, Supports JSON5.
 */

var color   = require('cli-color'),
	program = require('commander'),
	path    = require('path'),
	request = require('unirest'),
	fs      = require('fs'),
	Helpers = require('../src/utilities/Helpers'),
	Errors  = require('../src/utilities/ErrorHandler'),
	JSON5   = require('json5'),
	Newman  = require('../src/Newman');

function parseArguments() {
	program
	  .version('1.1.4')
	  .usage('[options]')
	  .option('-c, --collection [file]', 'Specify a Postman collection as a JSON [file]', null)
	  .option('-u, --url [url]', 'Specify a Postman collection as a [url]', null)
	  .option('-f, --folder [folder-name]', 'Run a single folder from a collection. To be used with -c or -u', null)
	  .option('-e, --environment [file]', 'Specify a Postman environment as a JSON [file]', null)
	  .option('-d, --data [file]', 'Specify a data file to use either json or csv', null)
	  .option('-g, --global [file]', 'Specify a Postman globals file [file]', null)
	  .option('-y, --delay [number]', "Specify a delay (in ms) between requests", null)
	  .option('-s, --stopOnError', "Stops the runner with code=1 when a test case fails", null)
	  .option('-n, --number [number]', 'Define the number of iterations to run.', null)
	  .option('-C, --noColor', 'Disable colored output.', null)
	  .option('-x, --exitCode', 'Continue running tests even after a failure, but exit with code=1. Incompatible with --stopOnError', null)
      .option('-J, --junitXml [file]', 'Path to file where junit xml should be written.', null)
      .option('-l, --junitLevel [level]', 'The level to consider a "test case" for Junit (collection,folder,call,test)', null)
      .option('-j, --collectionFile [file]', 'This file will contain a copy of the colleciton, with the responses from the tests added. [file]', null)
	  .option('-o, --outputFile [file]', 'Path to file where output should be written. [file]', null);

	program.on('--help', function() {
	  console.log('  Newman is a command-line collection runner for Postman.');
	  console.log('');
	  console.log('  Examples:');
	  console.log('');
	  console.log('    newman -c POSTMAN_COLLECTION');
	  console.log('    newman -u POSTMAN_COLLECTION -e POSTMAN_ENVIRONMENT');
	  console.log('    newman -c POSTMAN_COLLECTION -f SAMPLE_FOLDER');
	  console.log('');
	  console.log('  For more documentation, issues and examples head over to https://github.com/a85/Newman');
	  console.log('');
	});

	program.parse(process.argv);

	if (program.collection) {
		Helpers.validateCollectionFile(program.collection);
	} else if (program.url) {
		Helpers.validateCollectionUrl(program.url);
	} else {
		Errors.terminateWithError("Please provide a valid collection file / url to run");
	}

    if (!program.folder) {
        if(process.argv.indexOf("-f")!=-1 || process.argv.indexOf("--folder")!=-1) {
            Errors.terminateWithError("The --folder / -f switch requires a folder name.");
        }
    }

    if (program.data) {
        Helpers.validateDataFile(program.data);
    }

    if (program.global) {
        Helpers.validateGlobalFile(program.global);
    }

    if(program.environment) {
        Helpers.validateEnvironmentFile(program.environment);
    }
}

function main() {
	parseArguments();
	
	newmanOptions = {};

	if (program.environment) {
		// in case of environment variable set the envJson property 
 		// on the options object
        try {
		    newmanOptions.envJson = JSON5.parse(fs.readFileSync(program.environment, 'utf8'));
        }
        catch (err) {
            Errors.terminateWithError("The environment file " + program.environment+" could not be parsed.");
        }
	}

	newmanOptions.responseHandler = 'TestResponseHandler';

	if (program.number) {
		newmanOptions.iterationCount = program.number;
	}

	if (program.outputFile) {
		newmanOptions.outputFile = program.outputFile;
	}

    if (program.junitXml) {
        newmanOptions.junitXml = program.junitXml;
    }

    if (program.junitLevel) {
        newmanOptions.junitLevel = program.junitLevel;
    }

    if (program.collectionFile) {
        newmanOptions.collectionFile = program.collectionFile;
    }

    if (program.data) {
        newmanOptions.dataFile = program.data;
    }

    if (program.delay) {
        if(isNaN(program.delay) || parseFloat(program.delay)%1 !== 0) {
            Errors.terminateWithError("The delay must be an integer");
        }
        newmanOptions.delay = parseInt(program.delay);
    }

    if (program.global) {
        try {
            newmanOptions.globalJSON = JSON5.parse(fs.readFileSync(program.global, 'utf8'));
        }
        catch (err) {
            Errors.terminateWithError("The global file " + program.global+" could not be parsed.");
        }
    }

    if(program.folder) {
        newmanOptions.folderName = program.folder;
    }

	newmanOptions.stopOnError = !!program.stopOnError;
	newmanOptions.noColor = !!program.noColor;
	newmanOptions.asLibrary = false;

	if (program.collection) {
        var collectionJson;
        try {
		    // read collection from the filesystem
		    collectionJson = JSON5.parse(fs.readFileSync(program.collection, 'utf8'));
        }
        catch (err) {
            Errors.terminateWithError("The collection file " + program.collection+" could not be parsed.");
        }
		Newman.execute(collectionJson, newmanOptions, function(exitCode) {
			if(program.exitCode) {
				process.exit(exitCode);
			}
		});

	} else {
		// get collection from url
		request.get(program.url).type('json').end(function(data) {
			if (data.error) {
				Errors.terminateWithError('Unable to fetch a valid response. Error: ' + data.code);
			}
			Newman.execute(data.body, newmanOptions, function(exitCode) {
				if(program.exitCode) {
					process.exit(exitCode);
				}
			});
		});
	}
}

main();
